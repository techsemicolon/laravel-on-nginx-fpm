; php.ini is a big configuration having lot of dirctives. 
; I am listing the ones which I find impact the performance
; Its always good to check the correct path of php.ini file
; the server is using as there can be more than one present on the server

; Output buffering is a mechanism for controlling how much output data
; (excluding headers and cookies) PHP should keep internally before pushing that
; data to the client. If your application's output exceeds this setting, PHP
; will send that data in chunks of roughly the size you specify.
; Setting this value to too small number will engage server sending lot of packet chunks back to the response
; Setting this value to too large number will keep server in a waiting state till buffer size reaches to this number
; which will also occupy server space
output_buffering = 4096


; I prefer hiding the information in response headers which signifies that
; server uses php bu turning this to off
expose_php = Off


; Maximum execution time of each script, in seconds
; Keeping this value similar to nginx and fpm timeouts will be ideal
max_execution_time = 60

; Maximum amount of time each script may spend parsing request data. It's a good
; idea to limit this time on productions servers in order to eliminate unexpectedly
; long running scripts.
max_input_time = 60

; Maximum amount of memory a script may consume (128MB)
; Setting this vlaue too large is a risk. If multiple long running scripts consume
; large memory_limit, the server memory can be exhausted pretty quickly.
memory_limit = 128M

; Determines if Zend OPCache is enabled
; Opcache is a great way to optimize php's opcode caching
; Very helpful for frameworks like laravel which have large footprints
opcache.enable=1

; With the default settings, whenever a PHP file is executed (for example through include or require)
; Opcache checks the last time it was modified on disk. 
; Then it compares this time with the last time it cached the compilation of that script. 
; When the file was modified after being cached, the compile cache for the script will be regenerated.
; This validation is not necessary in production, when you know the files never change. 
opcache.validate_timestamps=0

; Create a test php file and add 
; `<?php var_dump(realpath_cache_size());exit; ?>` in it. 
; If you run from browser, you will see value like `int(151426)`
; Use this benchmark to set realpath_cache_size value. 
; Ideally in this case I will set this to around 32k and 
; its time to live to 3600 seconds
realpath_cache_size = 32k
realpath_cache_ttl = 3600

